package com.Languages.controllers;

import java.util.List;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.Languages.models.languages;
import com.Languages.services.LanguageService;

@Controller
public class LanguageAPI {
	private final LanguageService languageService;

	public LanguageAPI(LanguageService languageService) {
		this.languageService = languageService;
	}

	@RequestMapping("/languages")
	public String index(Model model,@ModelAttribute("lang") languages lang) {
		List<languages> langs = languageService.allLanguages();
		model.addAttribute("langs", langs);
		return "/index.jsp";
	}

	
	@RequestMapping(value="/languages", method={RequestMethod.POST})
	    public String create(@Valid @ModelAttribute("lang") languages lang, BindingResult result) {
	        if (result.hasErrors()) {
	            return "/index.jsp";
	        } else {
	            languageService.createLanguages(lang);
	            return "redirect:/languages";
	        }
	    }
	 

	@RequestMapping(value = "/languages/{id}", method = RequestMethod.PUT)
	public languages update(@PathVariable("id") Long id, @RequestParam(value = "creator") String creator,
			@RequestParam(value = "name") String name, @RequestParam(value = "version") Integer version) {
		languages thisLanguage = languageService.updatLanguage(id, creator, name, version);
		return thisLanguage;
	}

	@RequestMapping(value = "/api/books/{id}", method = RequestMethod.DELETE)
	public void delete(@PathVariable("id") long id) {
		languageService.DeleteLang(id);
	}

	@RequestMapping("/api/books/{id}")
	public languages show(@PathVariable("id") long id) {
		languages showLanguage = languageService.findLanguages(id);
		return showLanguage;
	}

}
